syntax = "proto3";


// Taken directly from the bazel reapi, for compat
message Digest {
  // The hash. In the case of SHA-256, it will always be a lowercase hex string
  // exactly 64 characters long. 
  // in expectation, this should always be the sha256
  string hash = 1;

  // The size of the blob, in bytes.
  int64 size_bytes = 2;
}


message ArtifactPointer {
    // Artifacts are assumed to be files
    oneof pointer {
        Digest cas_hash = 1;
        string path = 2;
    }
    string artifact_name = 3;
}

message TestMetaData {
    // User name of who owns the test
    string test_owner = 1;
    // name of the design under test -- useful for tracking across different testbenches
    string design_under_test = 2;
    // Any extra data end-users might want to tag onto a test, for test organization
    map<string, string> extras = 3;
}


// The serialized record of single test execution
// A backend that stores this data should normalize the data in this object into a
// "TestDef" and a "TestInstantiation". I don't think it's complexity that
// should be exposed to the frontend
message TestResult {
    // same key from Invocation
    string invoke_id = 1; 
    // name of the test
    string test_name = 2; 
    // test definition id -- unique id to track the test across different Invocations, useful for test history 
    string test_def_id = 3; 
    // maps name of a file to a hash of the file contents
    // To start off, we should only support files here
    repeated ArtifactPointer artifacts = 4;
    // useful metadata for each test execution
    TestMetaData metadata = 5;
    // cli reproduction -- we might want to track this a level above
    string repro_command = 6;
}

message Invocation {
    // Highest level invocation for a set of tests -- must contain one or more test results
    // any time we run any test(s), an invocation object is created
    string invoke_id = 1; // uuid
    string rundate = 2; // date
    string user = 3;
    string repo = 4;
    string branch = 5;
    string hostname = 6;
    repeated TestResult executed_tests = 8;
}

